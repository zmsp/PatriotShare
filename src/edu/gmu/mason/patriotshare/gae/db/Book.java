package edu.gmu.mason.patriotshare.gae.db;

/**
 * Copyright 2015 -
 * Licensed under the Academic Free License version 3.0
 * http://opensource.org/licenses/AFL-3.0
 * 
 * Authors: Zobair Shahadat
 */


import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.google.appengine.api.datastore.Blob;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.api.datastore.Query.FilterPredicate;
import com.google.appengine.api.datastore.Transaction;

/**
 * GAE ENTITY UTIL CLASS: "Campus" <br>
 * PARENT: NONE <br>
 * KEY: A campus long Id generated by GAE <br>
 * FEATURES: <br>
 * - "name" a {@link String} with the name of the campus (e.g. "Fairfax Campus")<br>
 * - "address" a {@link String} with the address of the campus (e.g. "4400 University Dr., Fairfax, VA 22030, USA") <br>
 * - "google-map-location" a {@link String} with the Google map coordinates (e.g. "United States@38.826182,-77.308211") <br>
 */
public final class Book {

	//
	// SECURITY
	//

	/**
	 * Private constructor to avoid instantiation.
	 */
	private Book() {
	}

	//
	// KIND
	//

	/**
	 * The name of the Campus ENTITY KIND used in GAE.
	 */
	private static final String ENTITY_KIND = "Book";

	//
	// KEY
	//

	/**
	 * Return the Key for a given campus id given as String.
	 * 
	 * @param campusId A string with the campus ID (a long).
	 * @return the Key for this campusID.
	 */
	public static Key getKey(String ISBN) {
		long id = Long.parseLong(ISBN);
		Key bookKey = KeyFactory.createKey(ENTITY_KIND, id);
		return bookKey;
	}

	/**
	 * Return the string ID corresponding to the key for the campus.
	 * 
	 * @param campus The GAE Entity storing the campus.
	 * @return A string with the campus ID (a long).
	 */
	public static String getStringID(Entity book) {
		return Long.toString(book.getKey().getId());
	}

	//
	// NAME
	//

	/**
	 * The property name for the <b>name</b> of the campus.
	 */
	private static final String NAME_PROPERTY = "title";

	/**
	 * Return the name of the campus.
	 * 
	 * @param campus The GAE Entity storing the campus.
	 * @return the name of the campus.
	 */
	public static String getName(Entity book) {
		return (String) book.getProperty(NAME_PROPERTY);
	}

	/**
	 * The regular expression pattern for the name of the campus.
	 */
	private static final Pattern NAME_PATTERN = Pattern.compile("\\A[ \\w-'',]{3,100}\\Z");
	/**
	 * Check if the name is correct for a campus.
	 * 
	 * @param name The checked string.
	 * @return true is the name is correct.
	 */
	public static boolean checkName(String name) {
		Matcher matcher = NAME_PATTERN.matcher(name);
		return matcher.find();
	}
	/**
	 * Check if the name is correct for a campus.
	 * 
	 * @param name The checked string.
	 * @return true is the name is correct.
	 */
	public static boolean checkTitle(String title) {
		Matcher matcher = NAME_PATTERN.matcher(title);
		return matcher.find();
	}


	//
	// CREATE CAMPUS
	//

	/**
	 * Create a new campus if the name is correct and none exists with this name.
	 * 
	 * @param campusName The name for the campus.
	 * @return the Entity created with this name or null if error
	 */
	public static Entity createBook(String campusName) {
		Entity campus = null;
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Transaction txn = datastore.beginTransaction();
		try {

			if (!checkName(campusName)) {
				return null;
			}

			campus = getCampusWithName(campusName);
			if (campus != null) {
				return null;
			}

			campus = new Entity(ENTITY_KIND);
			campus.setProperty(NAME_PROPERTY, campusName);
			datastore.put(campus);

			txn.commit();
		} finally {
			if (txn.isActive()) {
				txn.rollback();
			}
		}

		return campus;
	}

	//
	// GET CAMPUS
	//

	/**
	 * Get a campus based on a string containing its long ID.
	 * 
	 * @param id A {@link String} containing the ID key (a <code>long</code> number)
	 * @return A GAE {@link Entity} for the Campus or <code>null</code> if none or error.
	 */
	public static Entity getCampus(String campusId) {
		Entity campus = null;
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			long id = Long.parseLong(campusId);
			Key campusKey = KeyFactory.createKey(ENTITY_KIND, id);
			campus = datastore.get(campusKey);
		} catch (Exception e) {
			// TODO log the error
		}
		return campus;
	}

	/**
	 * Get a campus based on a string containing its name.
	 * 
	 * @param name The name of the campus as a String.
	 * @return A GAE {@link Entity} for the Campus or <code>null</code> if none or error.
	 */
	public static Entity getCampusWithName(String name) {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		return getCampusWithName(datastore, name);
	}

	/**
	 * Get a campus based on a string containing its name.
	 * 
	 * @param datastore The current datastore instance.
	 * @param name The name of the campus as a String.
	 * @return A GAE {@link Entity} for the Campus or <code>null</code> if none or error.
	 */
	public static Entity getCampusWithName(DatastoreService datastore, String name) {
		Entity campus = null;
		try {

			Filter hasName = new FilterPredicate(NAME_PROPERTY, FilterOperator.EQUAL, name);
			Query query = new Query(ENTITY_KIND);
			query.setFilter(hasName);
			List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(10));
			if (result != null && result.size() > 0) {
				campus = result.get(0);
			}
		} catch (Exception e) {
			// TODO log the error
		}
		return campus;
	}


	//
	// DELETE BOOK
	//

	/**
	 * Delete the campus if not linked to anything else.
	 * 
	 * @param campusID A string with the campus ID (a long).
	 * @return True if succeed, false otherwise.
	 */
	public static boolean deleteBookCommand(String ISBN) {
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.delete(getKey(ISBN));
		} catch (Exception e) {
			return false;
		}
		return true;
	}


}
